#!/bin/bash

COMPOSE=docker-compose.yml
USER_NAME=`id -un`
USER_UID=`id -u`
USER_GID=`id -g`
VERSION=1.1
PHP_SERVICE=php


ds_usage() {
cat << EOF
Usage: ${0##*/} [-h]

Control your devstack.

Version: $VERSION

Options:
    -c          Path to docker-compose.yml. Defaults to 'docker-compose.yml' in current dir
    -p          Name of PHP service. Defaults to 'php'
    -h          Display this help and exit.

Commands:
    Devstack:
        s | up | start [service]       Start
        sl | start-logs                Start and follow logs
        r | restart                    Restart
        rl | restart-logs              Restart and follow logs
        b | build                      Build
        ru | reup                      Build & Start
        k | stop [service]             Stop
        d | destroy [service]          Destroy
        l | logs [service]             Follow the devstack logs

    Service:
        reb | rebuild [-s] [service]   Rebuild service (and start again)
        ps | list                      List services in devstack
        run <service> <command>        Exec command in service
        e | exec <service> <command>   Exec command in running service
        g | go <service> [user]        Attach to specified service in devstack (as given user)

    Special:
        ncc                            Clear Nette cache of php service
        a | adminer                    Run service with Adminer on http://localhost:81
        m | migrations                 The Nextras Migrations submodule
EOF
}

# current directory specifies project name
ds_call() {
    USER_NAME=${USER_NAME} \
    USER_UID=${USER_UID} \
    USER_GID=${USER_GID} \
    docker-compose --file "$COMPOSE" "$@"
}

ds_start() {
    # -d = Detached mode: Run containers in the background, print new container names.
    ds_call up -d --remove-orphans "$@"
}

ds_build() {
    ds_call build
}

ds_reup() {
    ds_build
    ds_start
}

ds_stop() {
    ds_call stop "$@"
}

ds_destroy() {
    ds_call stop "$@"
    # -f = Don't ask to confirm removal.
    ds_call rm -f "$@"
}

ds_rebuild() {
    ds_destroy "$@"
    ds_build
}

ds_list() {
    ds_call ps
}

ds_logs() {
    # --follow = Follow log output.
    ds_call logs --follow "$@"
}

ds_run() {
    echo "Exit the service by ^P^Q or run with -d next time."
    ds_call run "$@"
}

ds_exec() {
    ds_call exec "$@"
}

ds_go() {
    ds_call exec "$1" /bin/bash
}

ds_gou() {
    ds_call exec --user "$2" "$1" /bin/bash
}

ds_netteClearCache() {
    # ds_call exec ${PHP_SERVICE} git clean -fdX ./temp/

    ds_call exec ${PHP_SERVICE} rm -fr /var/www/html/temp/cache/latte
    ds_call exec ${PHP_SERVICE} rm -fr /var/www/html/temp/cache/Nette.Configurator
    ds_call exec ${PHP_SERVICE} rm -fr /var/www/html/temp/cache/_Nette.RobotLoader
    ds_call exec ${PHP_SERVICE} rm -fr /var/www/html/temp/cache/_orm%00metadata
    remainingFiles=`ds_call exec ${PHP_SERVICE} ls /var/www/html/temp/cache`
    [[ ! -z $remainingFiles ]] \
        && echo -e "Remaining files: \n${remainingFiles}" \
        || echo "Cleared"
}

ds_adminer_run() {
    # -d = Run container in background and print container ID
    # -p = Publish a container's port(s) to the host (default [])
    docker run -d -p 81:80 dockette/adminer
}

ds_migrations_usage() {
cat << EOF
Usage: ${0##*/} migrations

Nextras Migrations submodule for Devstack

Options:
    -h | --help     Detailed help for each command.
                    Other arguments are passed too.

Commands:
    c | create      Command migrations:create
                    Creates new migration file with proper name (e.g. 2015-03-14-130836-label.sql)
        <type>      One of S/B/D (structures/basic data/dummy data)
        <label>     Short description

    n | continue    Command migrations:continue
                    Updates database schema by running all new migrations.
                    If table 'migrations' does not exist in current database, it is created automatically.
        [--production]
                    Will not import dummy data

    r | reset       Command migrations:reset
                    Drops current database and recreates it from scratch (runs all migrations).
        [--production]
                    Will not import dummy data
EOF
}

ds_migrations_get_cmd() {
    action="$1"
    index="php www/index.php"
    migrationsCmd="migrations:"
    echo "$index" "${migrationsCmd}${action}"
}

ds_migrations_create() {
    migrationsCmd=`ds_migrations_get_cmd "create"`
    ds_call exec ${PHP_SERVICE} $migrationsCmd "$@"
}

ds_migrations_continue() {
    migrationsCmd=`ds_migrations_get_cmd "continue"`
    ds_call exec ${PHP_SERVICE} $migrationsCmd "$@"
}

ds_migrations_reset() {
    migrationsCmd=`ds_migrations_get_cmd "reset"`
    ds_call exec ${PHP_SERVICE} $migrationsCmd "$@"
}

ds_switch_main() {
    case "$1" in
        -c)
            shift
            [[ ! -f "$1" ]] \
                && echo "Config file $1 does not exist!" \
                && exit 1
            COMPOSE="$1"
            shift
            ds_switch_main "$@"
            ;;
        -p)
            shift
            PHP_SERVICE="$1"
            shift
            ds_switch_main "$@"
            ;;
        s|up|start)
            shift
            ds_start "$@"
            ;;
        sl|start-logs)
            ds_start && ds_logs
            ;;
        r|restart)
            ds_stop && ds_start
            ;;
        rl|restart-logs)
            ds_stop && ds_start && ds_logs
            ;;
        b|build)
            ds_build
            ;;
        ru|reup)
            ds_reup
            ;;
        k|stop)
            shift
            ds_stop "$@"
            ;;
        reb|rebuild)
            shift
            case "$1" in
                -s)
                    shift
                    ds_rebuild "$@"
                    ds_start "$@"
                    ;;
                *)
                    ds_rebuild "$@"
                    ;;
            esac
            ;;
        d|destroy)
            shift
            ds_destroy "$@"
            ;;
        ps|list)
            ds_list
            ;;
        l|logs)
            shift
            ds_logs "$@"
            ;;
        run)
            shift
            ds_run "$@"
            ;;
        e|exec)
            shift
            ds_exec "$@"
            ;;
        g|go)
            shift
            if [[ "$#" -eq 1 ]]; then
                ds_go "$1"
            elif [[ "$#" -eq 2 ]]; then
                ds_gou "$1" "$2"
            else
                ds_usage
                exit 1
            fi
            ;;
        ncc)
            ds_netteClearCache
            ;;
        a|adminer)
            ds_adminer_run
            ;;
        m|migrations)
            shift
            case "$1" in
                c|create)
                    shift
                    if [[ -z "$1" ]]; then
                        ds_migrations_create -h
                        exit 1
                    fi
                    ds_migrations_create "$@"
                    ;;
                n|continue)
                    shift
                    ds_migrations_continue "$@"
                    ;;
                r|reset)
                    shift
                    ds_migrations_reset "$@"
                    ;;
                -h)
                    ds_migrations_create -h
                    echo -e "\n-----\n"
                    ds_migrations_continue -h
                    echo -e "\n-----\n"
                    ds_migrations_reset -h
                    exit 1
                    ;;
                *)
                    ds_migrations_usage
                    exit 1
                    ;;
            esac
            ;;
        *)
            ds_usage
            exit 1
            ;;
    esac
    shift
}


ds_switch_main "$@"
exit 0
